<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAANcNAADXDQAAAAAAAAAA
        AABgSkIAYEpCAWBKQmZgSkK3YEpC0mBKQuNgSkLvYEpC8WBKQvBgSkLrYEpC3GBKQsZgSkKXYEpCM2BK
        QgBgSkIAYEpCAGBKQgBgSkIAZlFKAE82LwA/IQwASy4WAEksFQBJLBUASSwVAEksFQBJLBVFSiwV1Egr
        FfFEKRPZQykTUGBKQjJgSkLaYEpC/2BKQv9gSkL/YEpC/2BKQv9gSkL/YEpC/2BKQv9gSkL/YEpC/2BK
        Qv9gSkL/YEpCgWBKQgBgSkIAY01FAFM7MwBONS0ARCoiAEIkDgBLLhYASSwVAEksFQBJLBUASSwVLUos
        Ff9FKhT/RioU/1QyGf9VMxrzYEpCy2BKQv9gSkL/XklB/1xHP/9aRj7/WUU+/1pGPv9ZRj7/WUU+/1tG
        P/9dSED/YEpC/2BKQv9gSkL/YkxEMF1HPwBBJx8AZU9HALSppQCik40ANRYEAEosFABJLBUASSwVAEks
        FTdKLBXpRSoT/0YqFP9eOB3/aj8i/2k+If9hS0LNXEc//1lFPv9fSkL/ZU5F/2pRSP9uU0r/blRL/25U
        Sv9sUkn/aFBH/2JMQ/9bRz//WUU+/2JNRf9VPjVARCsjAIt6cwDt6eMA////AMzDvwArCwAASSsTAEks
        FQBJLBVGSiwV/0UqE/9GKxT/Yjof/2k+Iv9kPCD/Yzof6llFPsRiS0P/dFhO/39fVP+DYlf/hWRY/4Zl
        Wf+GZVn/h2RZ/4ZkWf+EY1j/gGBV/3pcUv9sUkn/Uz43/0s0LBe1qKEA////AP/78wD///8Auq2qAC4O
        AABJKxMASSwVIkosFf9FKRP/RioU/2I6H/9pPiH/ZDsf/2U8IP9bNhxFbFJJxIVjWP+IZlr/g2JX/4Fh
        Vv+AYFX/gGBV/4BgVf+AYFX/gGBV/4FgVf+CYVb/hmVZ/4dkWP9kRDr/u6+og////yr07ucA7ubeAP//
        /wC6rqoALg4AAEkrE0JKLBXqRCkT/0YqFP9hOR7/aT4h/2Q8H/9jOx/rXDgdOVg1GwCEY1fEg2JX/31e
        U/94XFH/c1lP/3NZT/90WU//dVpQ/3RZT/9zWU//c1lP/3ZaUP97XVP/fVxR/3xXS//m29P///74/+7n
        4NHv6OBt////ALWopAAoBwA6TC4V/0UqE/9GKxT/YTof/2k+Iv9kOx//ZTwf/1w3HDBZNhwAWjYbAHxd
        U8RzWU//fV5T/4hlWf+WbGD/oXJl/6Z1Z/+pd2j/p3Zo/6R0Zv+ccGP/jmhc/4JhVv90V03/bExB/9bS
        1v//////8urj/+/o3////v7OwLWxXh0AAOY5HAX/SS4Y/2E6Hv9pPiH/Yzsf/2Q8H/9dOBxJWTYbAFs3
        HABaNhsAd1tRxKR0Z/+6gHH/woV0/8uKef/Ni3r/zIp5/8yKef/Minn/zIp5/8yKef/Hh3f/voJz/7F6
        bP99WE3/x62O//bq1//o7fX/8PH1//Pr4v/49fL/rZ+Y/ywKAP9RJwv/a0Im/2Q8H/9jOx/0WzccLFk2
        GwBbNxwAWzccAFo2GwCpd2jE1Y9+/8eId//BhXT/voJz/72Acv+8f3L/vH5y/7x/cv+9gHL/voFy/8CE
        c//EhnX/zot7/7l+df/amE7/97FV/+a3fP/l2cv/6/P///jz8P//////xLWr/0sbAP9bMBL/Zj4i/1w3
        HDxZNhsAWzccAFs3HABbNxwAWjYbAMOFdcTAg3T/u3xx/7l6cP+7fnH/v4Nz/8GHdP/DiHX/woh0/8CF
        dP+9gXL/untx/7l6cP+6fnH/v4F3/+iqa//2uGL/86I+/+ueQP/lyKT/6eru//Lw8P//////u6mc/zYE
        ANI7EABEPhUAAD8WAAA/FgAAPxYAAD8WAAA+FQAAun1xxLt8cf/FjHb/z5t6/9SifP/YqH7/2qt//9us
        f//arH//2ap//9amff/Rnnv/ypV4/72Bc/+0dnH/5Kdo//ayVv/wwIT/88eS//GWJv/kt37/6Ort//j0
        8P///Pn/rpuQSZuEcQClkH8ApZB/AKWQfwClkH8ApZB/AKWPfgC9gXLK1KJ8/9+ygf/htYL/37KB/92v
        gP/crYD/262A/9utgP/croD/3rCB/+Czgv/htYL/2quA/8CJd//goWj/9apE//LTrv/2////8cmX//GV
        Jf/kyaf/6vL+//Tr4v/////P////AP///wD///8A////AP///wD///8A////AMqSZMTmt3//262C/9qq
        f//aq3//2qt//9qrf//aq3//2qt//9qrf//aq3//2qt//9qqfv/esYP/162G/+apZ//zrVP/8+TR//b+
        ///09fX/8rlz/+y1bv/j18f/8fHz/+/o4P/v6OFn7+jhAO/o4QDv6OEA7+jhAO/o4QDv6OEA3cSrZNyr
        fv/Vm2X/2qd4/9yuhP/brIH/2al8/9mpfP/Zq4D/26p//9uqfv/Yq4H/1qqE/9Sphv/ir3b/8rNj/++m
        Tv/y1rT/9fr///X+///y277/9KlL/+W9i//n7vf/8uri/+/o4eHv6OEA7+jhAO/o4QDv6OEA7+jhAO/o
        4QD3+vt47ePb/+HCpf/ZrYT/26yA/9qqfv/XpHT/16d6/9mpgP/upnD/6ql1/9mpfv/drHv/6K5r//Ow
        XP/xs2b/7aFF//HLnP/1/P//9PPy//Tx7f/xsmX/6qhY/+Td1P/y7+z/7+jh/+/o4Sbv6OEA7+jhAO/o
        4QDv6OEA7+jhAO7m3s318+//8fv//9TFsf/AhT//xpNX//b15//46Nj/7qtb/4vGsv+Uwqz/97Fg//Oy
        Yf/zrVX/76xY/+2fQP/vrVz/9O3l//T19f/07uf/9f3///HIl//umjH/5c6y/+3x9//w6OH/7+jhau/o
        4QDv6OEA7+jhAO/o4QDv6OEA7+jh6fLr4//t8fb/z7mb/rZzH//JpXf/4d/////Bif//slD/N930/1HO
        2P//tl3/9KZK//LJlv/07eD/8tKr//Pjzv/19fT/9O/p//Tu5v/1/v//8t/F//CaMP/nxZv/7PD4//Dp
        4v/v6OGJ7+jhAO/o4QDv6OEA7+jhAO/o4QDv6OHy8+vk/+zw9P/MspH+t3sw/9OjbP/eo3r/3KJS//+s
        V//gv3v/xsiV//irUf/5tlb/8+zj//X////1/f//9ff7//Tu5//07+j/9PHt//Xz8v/y1bD/8aVH/+jG
        m//s8fj/8Oni/+/o4Y3v6OEA7+jhAO/o4QDv6OEA7+jhAO/o4e3z6+T/7PD1/820lfy4fzr+15NK/++x
        UP9z2tL/XOfn/+epXf/vqVr/7sRX/8WIhP/l4vP/+vjw//Tv6f/07+n/9O/p//Tv6P/1+v//8tOt//Pf
        xv/00aX/58uo/+vt8P/w6eL/7+jhjO/o4QDv6OEA7+jhAO/o4QDv6OEA7+jh3vLr4//s7/T/0L2k+ruB
        Ov3Tk07/xLJ0/1bn7/9K6/f/ysFw/9qXYv+HUL7/WCD4/9LJ9v////b/9O7n//Tu5v/19vj/9f3///X8
        ///z3sP/8t3C//TYtP/m4t7/6+Xf//Dp4v/v6OF87+jhAO/o4QDv6OEA7+jhAO/o4QDv6OGt8erj/+7r
        6f/Z08r6wY9R+8yFO/+5rHj/Ve7x/3Tf3v/yrFP/+sZL/4lTwP9vM8//1KOC//js1f/2+fv/9v////Pj
        z//xyJb/8ceU//Tq3//27eH/7+nf/+Hg4P/x6eH/7+jh/+/o4Ubv6OEA7+jhAO/o4QDv6OEA7+jhAO/o
        4WLv6OH/8+ri/+Xr8v7Ip3z5wXUl/8idX/9V5en/N+z//8G2gf/6tU7/0pZw/+2xXv//uTf/8NSy//Pg
        x//wwon/7qpV/+6mS//vr2D/8tu6//vv3v/k4+L/4tzU//Ts5f/v6OH47+jhBe/o4QDv6OEA7+jhAO/o
        4QDv6OEA7+jhEO/o4f/z6+T/7e7v/9TMwPnFhDv8uopN/6XSwf+2zaD/8LNi/9ydXP/xtFX//bxf/+uo
        XP/y3b//8+ja/++yZ//y2br/9ff0//HQpv/12bT/8erf/93c2v/v6OD/8Oni/+/o4aPv6OEA7+jhAO/o
        4QDv6OEA7+jhAO/o4QDv6OEA7+jhge/o4f/z6+L/6e/2/sewj/m3bhf+7656///Sm//xqVT/8LBg//Cy
        Zf/usWX/77Bi/+6kSf/xzJ7/9fv///X6///08/P/9/////v9///g29b/5t/X//Ps5f/v6OH/7+jhG+/o
        4QDv6OEA7+jhAO/o4QDv6OEA7+jhAO/o4QDv6OEA7+jh7vHp4v/07+r/3+Tm+8Ofb/ezeC7+3K1y//++
        cP/zuHD/7aNK/+6lTf/vr2H/769h/+6iRP/y3cH/9v////jz7v/41Kb/38+7/+He2//07eb/7+jh/+/o
        4YTv6OEA7+jhAO/o4QDv6OEA7+jhAO/o4QDv6OEA7+jhAO/o4QDv6OFM7+jh//Lp4f/w7u3/4OXo+8ap
        hPi4fzf60Yct//bZtf/+7tj/89i0//DEjf/vqVT/765f//S+ff/5zpb/7seV/9y5jP/e2tT/8Ozo//Hp
        4v/v6OHk7+jhAO/o4QDv6OEA7+jhAO/o4QDv6OEA7+jhAO/o4QDv6OEA7+jhAO/o4QDv6OGA7ujh//Lp
        4f/07+r/6vD3/tLKv/i6lGT3yKBu+erVuf333rv998+c/fOsU/3xqVH96qpb/t6weP/YzsD/5u33//Tu
        6P/x6eH/7ujh+e/o4SLv6OEA7+jhAO/o4QDv6OEA7+jhAO/o4QDv6OEA7+jhAO/o4QDv6OEA7+jhAO/o
        4QDv6OGA7ujh//Hp4v/z6+L/7e7v/+fv+PzRx7v5yKqF+tqzhPXjwZjy4Miq+t3LtPva2tr+3ufx/+7r
        6v/06+L/7+jh/+/o4e/v6OEt7+jhAO/o4QDv6OEA7+jhAO/o4QDv6OEA7+jhAO/o4QDv6OEA7+jhAO/o
        4QDv6OEA7+jhAO/o4QDv6OFY7+jh3+/o4f/z6+T/8+ri/+/s6f/r7/T/5evy/+Po8P/j6fH/5unu/+/q
        5f/07OP/8erj/+7o4f/v6OGq7+jhHu/o4QDv6OEA7+jhAO/o4QDv6OEA7+jhAO/o4QDv6OEA7+jhAO/o
        4QDv6OEA7+jhAO/o4QDv6OEA7+jhAO/o4QDv6OEG7+jhf+/o4fbv6OH/8erj//Pr5P/z6+T/8+vk//Pr
        5P/y6+T/8Oni/+/o4f/v6OHJ7+jhSe/o4QDv6OEA7+jhAO/o4QDv6OEA7+jhAO/o4QDv6OEA7+jhAO/o
        4QDv6OEA7+jhAO/o4QDv6OEA7+jhAO/o4QDv6OEA7+jhAO/o4QDv6OEA7+jhF+/o4WLv6OGl7+jh1O/o
        4e3v6OHy7+jh5u/o4cfv6OGN7+jhQ+/o4QDv6OEA7+jhAO/o4QDv6OEA7+jhAO/o4QDv6OEA7+jhAO/o
        4QDv6OEA7+jhAO/o4QDv6OEAgAP/4AAB/8AAAP+AAAD/AAAA/gAAAHwBAAAYAwAAAAcAAAAPAAAAHwAA
        AD8AAAB/AAAAfwAAAD8AAAA/AAAAHwAAAB8AAAAfAAAAHwAAAB8AAAAfAAAAHwAAAB8AAAA/gAAAP8AA
        AH/AAAD/4AAA//AAAf/4AAP//AAP//8AP/8=
</value>
  </data>
</root>